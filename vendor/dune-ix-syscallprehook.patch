diff --git a/libdune/dune.S b/libdune/dune.S
index a8f34c0..3306897 100644
--- a/libdune/dune.S
+++ b/libdune/dune.S
@@ -291,8 +291,58 @@ __dune_syscall:
 	/* handle system calls from G0 */
 	testq $1, %gs:IN_USERMODE
 	jnz 1f
-	pushq	%r11
-	popfq
+
+	pushq %r11 // contains rflags
+
+	// TODO: how about multi-threading support??
+	// check if we have a handler registered for system calls originating in ring 0
+	pushq %rax
+	movq __dune_ring0_syscall_prehook, %rax
+	testq %rax, %rax
+	popq %rax
+	jz passthrough_to_host
+
+	// all right, so we're handling a syscall that came from ring 0 in ring 0, why not
+
+	// From the System V AMD64 ABI calling convention: "If the callee wishes to use registers RBX, RBP, and R12-R15, it must restore their original values before returning control to the caller. All other registers must be saved by the caller if it wishes to preserve their values."
+	// so we have to save rax, rcx, rdx, rdi, rsi, r8-11 before calling into the C prehook; these are all needed for the system call anyway (r11 with rflags is saved as first thing in this function)
+	pushq %rcx // return address
+	pushq %rax // syscall number
+
+	// save the syscall arguments in an array on the stack
+	pushq %r9  // arg 6
+	pushq %r8  // arg 5
+	pushq %r10 // arg 4
+	pushq %rdx // arg 3
+	pushq %rsi // arg 2
+	pushq %rdi // arg 1
+
+	// call the prehook; while the prehook is running, deregister it, so that we don't get into recursion if it tries to do a syscall
+	movq %rax, %rdi // argument 1: syscall number
+	movq %rsp, %rsi // argument 2: pointer to the syscall arguments array
+
+	pushq %rbp
+	movq __dune_ring0_syscall_prehook, %rbp // %rbp is callee-saved
+	movq $0, __dune_ring0_syscall_prehook
+
+	call *%rbp
+
+	movq %rbp, __dune_ring0_syscall_prehook
+	pop %rbp
+
+	// restore the syscall arguments
+	popq %rdi // arg 1
+	popq %rsi // arg 2
+	popq %rdx // arg 3
+	popq %r10 // arg 4
+	popq %r8  // arg 5
+	popq %r9  // arg 6
+
+	popq %rax // syscall number
+	popq %rcx // return address
+
+passthrough_to_host:
+	popfq // restore rflags (was placed by syscall to %r11 originally)
 	vmcall
 	jmp	*%rcx
 
