 - statistics printing has %zu baked in
 - ctestfx: split the header files, so that the user API is not mixed with implementation details
 - we could build in some heuristics to process_syscall_ptr_arg(): if we can tell from a pointer that it's a stack pointer or global variable (in .data or .bss) then we shouldn't pagewalk it - take a look at dune_va_to_pa()
 - printf_nomalloc() seems to have some problems, e.g. try using init.c with it; looks like a concurrency issue, but it couldn't be??
 - nicer output for the unit testing framework: colors, indentations, empty lines

Check out https://github.com/project-dune/dune/ and maybe try switching to that, as it seems more actively maintained?

Maybe later:
 - using _Generic() and the _CTESTFX_FMT() macro from ctestfx, we could build a wrapper for printf that is closer to std::cout
 - open-source scripts/generate_syscallmeta.py as linux-syscallmeta
 - open-source ctestfx as a separate library
 - more memory allocation functions: aligned_alloc(), memalign(), valloc(), etc. https://linux.die.net/man/3/memalign ?

------------------ old stuff ---------------

General:
 - multi-threaded tests
 - performance measurement:
    baseline, ix-dune baseline, dangless
 - garbage collector
 - memalign(), valloc()

Test framework:
 - strong override fprintf() and printf(): only print test output if verbose mode is on
 - auto-indentation of output?

Optimisations:
 - virtual page allocator: have thread-local regions, e.g. split them up per PML4 entry or so
    is it worth optimising for using as little virtual memory as possible, so that we don't need that many page tables, and maybe it's better for the TLB as well?
 - pt_map_page(): similarly to the virtual page allocator, have a separate mutex for each e.g. PML4 entry, to let unrelated (re)mappings proceed in parallel
 - for big enough remappings, we could use hugepages
 - replace mutexes with spinlocks at most places

------------------------------------------------

Rumprun:
 - fix the problem that rumprun also strong_alias-es malloc et al
 - refactor/unite the platform-specific virtual_remap.c files, or at least inherit the enchancements from the Dune version
 - make the physical page allocator thread-safe
 - span merging in the physical page allocator

Low-priority general:
 - for huge allocations (that are >= 2 MB), we could use hugepages
 - aligned_alloc()? rumprun doesn't implement it

Low-priority Rumprun:
 - mirror output to disk; look into how the rumprun tests do this
 - look into Cristiano's suggestion with the pre-linking to get rid of the rumprun offsets; or, if that's not an option, automate getting the offsets from the rumprun binaries
