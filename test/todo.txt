General:
 - anything else in dangless_malloc.c that needs to be made thread-safe? e.g. access to pagetables?
 - memalign(), valloc()
 - span merging in the virtual page allocator

Test framework:
 - strong override fprintf() and printf(): only print test output if verbose mode is on
 - auto-indentation of output?

Optimisations:
 - virtual page allocator: have thread-local regions, e.g. split them up per PML4 entry or so
 - pt_map_page(): similarly to the virtual page allocator, have a separate mutex for each e.g. PML4 entry, to let unrelated (re)mappings proceed in parallel
 - for big enough remappings, we could use hugepages
 - replace mutexes with spinlocks at most places

------------------------------------------------

Rumprun:
 - fix the problem that rumprun also strong_alias-es malloc et al
 - refactor/unite the platform-specific virtual_remap.c files, or at least inherit the enchancements from the Dune version
 - make the physical page allocator thread-safe
 - span merging in the physical page allocator

Low-priority general:
 - for huge allocations (that are >= 2 MB), we could use hugepages
 - design the garbage collector
 - aligned_alloc()? rumprun doesn't implement it

Low-priority Rumprun:
 - mirror output to disk; look into how the rumprun tests do this
 - look into Cristiano's suggestion with the pre-linking to get rid of the rumprun offsets; or, if that's not an option, automate getting the offsets from the rumprun binaries
